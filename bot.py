import os
import telebot
from telebot import types
import qrcode
from PIL import Image, ImageDraw, ImageFont
import io
import logging
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler
import time
import tempfile
from pyzbar import pyzbar
import cv2
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HealthHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health check –Ω–∞ Render"""
    def do_GET(self):
        try:
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            response = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>QR Code Generator Bot</title>
                <meta charset="UTF-8">
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #1a1a1a; color: white; }
                    h1 { color: #00d4aa; }
                </style>
            </head>
            <body>
                <h1>üì± QR Code Generator Bot</h1>
                <p>‚úÖ Online and Ready</p>
                <p>üîß Generate QR codes instantly</p>
                <p>üë®‚Äçüíª Developer: @oxygw</p>
            </body>
            </html>
            """
            self.wfile.write(response.encode('utf-8'))
        except Exception as e:
            logger.error(f"HTTP error: {e}")
    
    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()
    
    def log_message(self, format, *args):
        return

def keep_alive():
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render"""
    try:
        port = int(os.environ.get('PORT', 8000))
        server = HTTPServer(('0.0.0.0', port), HealthHandler)
        logger.info(f"HTTP server starting on port {port}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"HTTP server error: {e}")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    'qr_generated': 0,
    'qr_scanned': 0,
    'total_users': set()
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    btn1 = types.InlineKeyboardButton("üì± –°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥", callback_data="create_qr")
    btn2 = types.InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR", callback_data="scan_info")
    btn3 = types.InlineKeyboardButton("‚öôÔ∏è –†–∞–∑–º–µ—Ä QR", callback_data="settings")
    btn4 = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    btn5 = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    
    return markup

def create_size_menu(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    current_size = user_settings.get(user_id, {}).get('size', 300)
    
    sizes = [200, 300, 400, 600]
    for size in sizes:
        text = f"{'‚úÖ ' if size == current_size else ''}{size}x{size}"
        markup.add(types.InlineKeyboardButton(text, callback_data=f"size_{size}"))
    
    back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")
    markup.add(back_btn)
    
    return markup

def create_back_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥"""
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")
    markup.add(back_btn)
    return markup

def generate_qr_code(text, size=300):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR –∫–æ–¥"""
    try:
        # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(text)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        qr_img = qr.make_image(fill_color="black", back_color="white")
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        qr_img = qr_img.resize((size, size), Image.Resampling.LANCZOS)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        img_buffer = io.BytesIO()
        qr_img.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        return img_buffer
    except Exception as e:
        logger.error(f"QR generation error: {e}")
        return None

def scan_qr_code(image_bytes):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç QR –∫–æ–¥ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ numpy array
        nparr = np.frombuffer(image_bytes, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º QR –∫–æ–¥—ã
        decoded_objects = pyzbar.decode(image)
        
        if decoded_objects:
            results = []
            for obj in decoded_objects:
                data = obj.data.decode('utf-8')
                qr_type = obj.type
                results.append(f"**–¢–∏–ø:** {qr_type}\n**–î–∞–Ω–Ω—ã–µ:** `{data}`")
            return results
        else:
            return None
    except Exception as e:
        logger.error(f"QR scan error: {e}")
        return None

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats['total_users'].add(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if user_id not in user_settings:
        user_settings[user_id] = {'size': 300}
    
    welcome_text = f"""üì± **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!**

üöÄ **QR Code Generator Bot**

**üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üì± –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Å—Å—ã–ª–æ–∫
‚Ä¢ üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤ –∏–∑ —Ñ–æ—Ç–æ
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (200x200 –¥–æ 600x600)
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

**‚ö° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π QR –∫–æ–¥!

**üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @oxygw

üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:*"""

    markup = create_main_menu()
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    try:
        user_id = call.from_user.id
        
        if call.data == "create_qr":
            text = """üì± **–°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞**

üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:**
‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ Email –∞–¥—Ä–µ—Å
‚Ä¢ –ò–ª–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –µ—â–µ!

‚öôÔ∏è **–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:** {}x{}

üí° *–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º*""".format(
                user_settings.get(user_id, {}).get('size', 300),
                user_settings.get(user_id, {}).get('size', 300)
            )
            
            markup = create_back_menu()
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        
        elif call.data == "scan_info":
            text = """üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞**

üì∑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —Å QR –∫–æ–¥–æ–º**

‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ QR Code
‚Ä¢ Data Matrix
‚Ä¢ Aztec Code
‚Ä¢ Code128, Code39
‚Ä¢ EAN13, UPC-A

üí° *–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º*"""
            
            markup = create_back_menu()
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        
        elif call.data == "settings":
            text = """‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ QR –∫–æ–¥–∞**

üìè **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:**"""
            
            markup = create_size_menu(user_id)
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        
        elif call.data.startswith("size_"):
            size = int(call.data.replace("size_", ""))
            if user_id not in user_settings:
                user_settings[user_id] = {}
            user_settings[user_id]['size'] = size
            
            text = f"""‚úÖ **–†–∞–∑–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {size}x{size}**

üìè **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:**"""
            
            markup = create_size_menu(user_id)
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        
        elif call.data == "stats":
            total_users = len(stats['total_users'])
            text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}
üì± **QR –∫–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** {stats['qr_generated']}
üîç **QR –∫–æ–¥–æ–≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {stats['qr_scanned']}

‚ö° **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üìè –†–∞–∑–º–µ—Ä QR: {user_settings.get(user_id, {}).get('size', 300)}x{user_settings.get(user_id, {}).get('size', 300)}

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @oxygw
üöÄ **–°—Ç–∞—Ç—É—Å:** Online 24/7"""
            
            markup = create_back_menu()
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        
        elif call.data == "help":
            text = """‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

**üì± –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞:**
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π QR –∫–æ–¥

**üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞:**
1. –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å QR –∫–æ–¥–æ–º
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É

**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –†–∞–∑–º–µ—Ä—ã: 200x200, 300x300, 400x400, 600x600
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

**üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ QR –¥–ª—è Wi-Fi –ø–∞—Ä–æ–ª—è
‚Ä¢ QR –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
‚Ä¢ QR –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ QR –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

**üîß –ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @oxygw"""
            
            markup = create_back_menu()
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        
        elif call.data == "menu":
            user_name = call.from_user.first_name or "–¥—Ä—É–≥"
            welcome_text = f"""üì± **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!**

üöÄ **QR Code Generator Bot**

**üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üì± –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Å—Å—ã–ª–æ–∫
‚Ä¢ üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤ –∏–∑ —Ñ–æ—Ç–æ
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (200x200 –¥–æ 600x600)
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

**‚ö° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π QR –∫–æ–¥!

**üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @oxygw

üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:*"""
            
            markup = create_main_menu()
            bot.edit_message_text(welcome_text, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        
        try:
            bot.answer_callback_query(call.id)
        except:
            pass
            
    except Exception as e:
        logger.error(f"Callback error: {e}")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        user_id = message.from_user.id
        stats['total_users'].add(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_msg = bot.send_message(message.chat.id, "üîç –°–∫–∞–Ω–∏—Ä—É—é QR –∫–æ–¥...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º QR –∫–æ–¥
        results = scan_qr_code(downloaded_file)
        
        if results:
            stats['qr_scanned'] += 1
            
            response_text = "‚úÖ **QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!**\n\n"
            for i, result in enumerate(results, 1):
                response_text += f"**QR #{i}:**\n{result}\n\n"
            
            response_text += "üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @oxygw"
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(message.chat.id, status_msg.message_id)
            
            markup = create_back_menu()
            bot.send_message(message.chat.id, response_text, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.edit_message_text("‚ùå **QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                                 "üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
                                 "‚Ä¢ QR –∫–æ–¥ —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n"
                                 "‚Ä¢ –§–æ—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
                                 "‚Ä¢ QR –∫–æ–¥ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n\n"
                                 "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", 
                                 message.chat.id, status_msg.message_id, parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"Photo handler error: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats['total_users'].add(user_id)
        
        if not text:
            markup = create_back_menu()
            bot.send_message(message.chat.id, 
                           "‚ùì **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞**\n\n"
                           "üì± –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ", 
                           parse_mode='Markdown', reply_markup=markup)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_msg = bot.send_message(message.chat.id, "üì± –°–æ–∑–¥–∞—é QR –∫–æ–¥...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        size = user_settings.get(user_id, {}).get('size', 300)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        qr_image = generate_qr_code(text, size)
        
        if qr_image:
            stats['qr_generated'] += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if text.startswith(('http://', 'https://')):
                content_type = "üîó –°—Å—ã–ª–∫–∞"
            elif text.startswith(('tel:', '+', '8')) or text.replace(' ', '').replace('-', '').replace('(', '').replace(')', '').isdigit():
                content_type = "üìû –¢–µ–ª–µ—Ñ–æ–Ω"
            elif '@' in text and '.' in text:
                content_type = "üìß Email"
            else:
                content_type = "üìù –¢–µ–∫—Å—Ç"
            
            caption = f"""‚úÖ **QR –∫–æ–¥ —Å–æ–∑–¥–∞–Ω!**

{content_type}: `{text[:100]}{'...' if len(text) > 100 else ''}`
üìè **–†–∞–∑–º–µ—Ä:** {size}x{size}

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @oxygw"""
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(message.chat.id, status_msg.message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –∫–æ–¥
            markup = create_back_menu()
            bot.send_photo(message.chat.id, qr_image, caption=caption, 
                          parse_mode='Markdown', reply_markup=markup)
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞", 
                                 message.chat.id, status_msg.message_id)
    
    except Exception as e:
        logger.error(f"Text handler error: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR –∫–æ–¥–∞")

@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = message.from_user.id
    total_users = len(stats['total_users'])
    
    text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}
üì± **QR –∫–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** {stats['qr_generated']}
üîç **QR –∫–æ–¥–æ–≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {stats['qr_scanned']}

‚ö° **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üìè –†–∞–∑–º–µ—Ä QR: {user_settings.get(user_id, {}).get('size', 300)}x{user_settings.get(user_id, {}).get('size', 300)}

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @oxygw"""
    
    markup = create_back_menu()
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)

if __name__ == "__main__":
    try:
        # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
        http_thread = Thread(target=keep_alive)
        http_thread.daemon = True
        http_thread.start()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üì± QR Code Generator Bot starting...")
        logger.info("üë®‚Äçüíª Developer: @oxygw")
        logger.info("üöÄ Bot ready!")
        
        bot.polling(none_stop=True, interval=1, timeout=60)
        
    except Exception as e:
        logger.error(f"Critical error: {e}")
        time.sleep(10)